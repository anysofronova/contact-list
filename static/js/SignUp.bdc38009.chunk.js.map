{"version":3,"file":"static/js/SignUp.bdc38009.chunk.js","mappings":"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","sources":["webpack://react-takeoff/./src/components/Form/Form.module.scss?dea5","components/Form/Form.tsx","pages/SignIn/SignIn.tsx","pages/SignUp/SignUp.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Form_container__K-uLg\",\"form\":\"Form_form__psS5c\",\"errors\":\"Form_errors__cI6Rj\"};","import styles from \"./Form.module.scss\";\nimport { FC } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { IForm, InputsType } from \"../../@types/IForm\";\nimport { Link } from \"react-router-dom\";\n\nconst Form: FC<IForm> = ({\n  title,\n  isSignUp,\n  buttonText,\n  singInAndUp,\n  error,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<InputsType>();\n  const onSign: SubmitHandler<InputsType> = (data) => singInAndUp(data);\n  return (\n    <div className={styles.container}>\n      <form onSubmit={handleSubmit(onSign)} className={styles.form}>\n        <h2>{title}</h2>\n        <input\n          {...register(\"email\", {\n            required: true,\n            pattern: /^\\S+@\\S+\\.\\S+$/gi,\n          })}\n          placeholder={\"Email\"}\n        />\n        <input\n          {...register(\"password\", {\n            required: true,\n            minLength: isSignUp ? 8 : undefined,\n            maxLength: isSignUp ? 20 : undefined,\n          })}\n          placeholder={\"Password\"}\n          type={\"password\"}\n        />\n        <button className={\"button\"}>{buttonText}</button>\n        <div className={styles.errors}>\n          {isSignUp &&\n            (errors?.password?.type === \"minLength\" ||\n              errors?.password?.type === \"maxLength\") && (\n              <p>\n                The password cannot be shorter than 8 characters or longer than\n                20 characters.\n              </p>\n            )}\n          {errors?.email?.type === \"pattern\" && (\n            <p>Please enter a valid Email</p>\n          )}\n          {(errors?.email?.type === \"required\" ||\n            errors?.password?.type === \"required\") && (\n            <p>The fields are required</p>\n          )}\n          {error && <p>Wrong Email or Password</p>}\n        </div>\n        {isSignUp ? (\n          <div>\n            <div>Already have an account?</div>\n            <Link to={\"/login\"}>Log In</Link>\n          </div>\n        ) : (\n          <div>\n            <div>Dont have an account yet?</div>\n            <Link to={\"/register\"}>Create one</Link>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import { useState } from \"react\";\nimport Form from \"../../components/Form/Form\";\nimport { InputsType } from \"../../@types/IForm\";\nimport { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { setUser } from \"../../redux/slices/authSlice\";\nimport { useAppDispatch } from \"../../hooks/redux\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst SignIn = () => {\n  const [error, setError] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const singIn = ({ email, password }: InputsType) => {\n    const auth = getAuth();\n    signInWithEmailAndPassword(auth, email, password)\n      .then(({ user: { email, uid } }) => {\n        dispatch(\n          setUser({\n            email,\n            uid,\n          })\n        );\n        setError(false);\n        navigate(\"/home\");\n      })\n      .catch(() => setError(true));\n  };\n\n  return (\n    <Form\n      title={\"Sign in\"}\n      isSignUp={false}\n      buttonText={\"Sign in\"}\n      singInAndUp={singIn}\n      error={error}\n    />\n  );\n};\n\nexport default SignIn;\n","import Form from \"../../components/Form/Form\";\nimport { useState } from \"react\";\nimport { createUserWithEmailAndPassword, getAuth } from \"firebase/auth\";\nimport { setUser } from \"../../redux/slices/authSlice\";\nimport { useAppDispatch } from \"../../hooks/redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { InputsType } from \"../../@types/IForm\";\n\nconst SignUp = () => {\n  const auth = getAuth();\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const [error, setError] = useState<boolean>(false);\n  const signUp = ({ email, password }: InputsType) => {\n    createUserWithEmailAndPassword(auth, email, password)\n      .then(({ user: { email, uid } }) => {\n        dispatch(\n          setUser({\n            email,\n            uid,\n          })\n        );\n        navigate(\"/home\");\n      })\n      .catch((error) => setError(error));\n  };\n  return (\n    <Form\n      title={\"Create Account\"}\n      isSignUp={true}\n      buttonText={\"Sign Up\"}\n      singInAndUp={signUp}\n      error={error}\n    />\n  );\n};\n\nexport default SignUp;\n"],"names":["title","isSignUp","buttonText","singInAndUp","error","useForm","register","handleSubmit","errors","formState","className","styles","onSubmit","data","required","pattern","placeholder","minLength","undefined","maxLength","type","password","email","to","useState","setError","dispatch","useAppDispatch","navigate","useNavigate","auth","getAuth","signInWithEmailAndPassword","then","user","uid","setUser","catch","createUserWithEmailAndPassword"],"sourceRoot":""}